# packer notes

# installation
- single binary: 
  https://releases.hashicorp.com/packer/1.3.3/packer_1.3.3_linux_amd64.zip

# terminology
- artifacts: results of build (IDs/files to represent image)
- builds: single task which produces image for single platform
- builders: components of packer to create image for platform.  
  examples of builders are ec2 and vmware
- commands: sub-commands for packer tool (build, validate, etc)
- post-processors: results from builder or another post-processor
  to create a new artifact (example - compress, upload, etc)
- provisioners: components to install/configure prior to creating
  the image (example - shell scripts, ansible, etc)
- templates: json files defining one or more builds

# commands
- cli tool with sub-commands
- help displayed without any options or -h
- help with sub-command: packer <sub> -h
- enable machine-readable output:
  packer -machine-readable <sub> (csv format)
- autocomplete sub commands: packer -autocomplete-install

- build: run builds from template to generate artifact
  builds executed in parallel, unless specified otherwise
  - some useful options:
    -debug
    -except=name1,name2 (dont build these)
    -only=name1,name2
    -parallel=false
    -var
    -var-file
- fix: backwards compatability fix
  run after upgrading packer
- inspect: utputs components a tempalte defines from the template
  - tells you what the template accepts, builder defined, etc
- validate: validate sytax and configuration of template
  - options include -var, -var-file, etc

# templates
- json structure with sets of keys to define components of packer
  - builders: required - array of objects that defines builders
  - description
  - min_packer_version
  - post-processors:  one or more objects to define post
  - provisioners: one or more provisioner objects to define
  - variables: key/value
- comments: not really supported in json (unknown key error)
  - only prefix root level key with underscore is supported:
    "_comment": "this is a comment",
- builders: 
  - array of all builders used to generate image for template
  - responsible for creating images for various platforms
  - examples include ec2, vmware, virtualbox, etc
  - single builder definition maps to one build
  - json object
  - type (key): name of builder
  - other keys available to configure each builder type
  - name (key): name the build (default is builder name)
  - communicator: associated with every build.  used to establish
    connection for provisioning remote machine.  usually ssh.
- communicators:
  - mechanism used to upload files, execute scripts, etc
  - configured within the builder section
  - 3 types: none ,ssh, winrm (some builders have custom)
  - each communicator can have multiple configruation options:
    "communicator": "ssh",
    "ssh_port": "22",
- engine:
  - strings in templates processed by packer templating engine
  - variables and funtions used to modify values at runtime
  - syntax:
    {{ }} - everything within double curly braces
    {{timestamp}} - functions specified directly
    {{.Variable}} - template variables, period and capital
  - functions:
    - perform operations on strings.  e.g. {{timestamp}}
      examples: "my packer created on {{timestamp}}
    - some useful functions:
      - build_name
      - build_type
      - env (environment variables)
      - pwd, sed, split
      - template_dir
  - template variables:
    - special vars set by packer at build time
    - some builders, provisioners, components also have template
      vars for their component
    - recognisable with the '.' prefix.  example:
      "execute_command": "{{.Path}}/",
    - other useful functions:
      - {{split "fixed-string" "-" 1}} = string
      - {{sed}}
- post-processors:
  - post processing to images by the builders
  - example, compressing files, uploading artifacts, etc
  - results from EACH build defined builers are post-processed.
    so post-processor will run twice if 2 are defined.
  - 3 ways to define within the post-processor array:
    - simple: (just a string) - {"post-processors": ["compress"]}
    - detailed: (json object) - 
      [{"type": "compress", "format": "tar.gz"}]
    - sequential: combination of the above 2 but in order:
      "post-processors": [
        [ 
          "compress",
          { "type": "upload", "endpoint": "http://www.com/" }
        ]
      ]
- input artifacts:
  - artifacts from builders are discarded after post-processor
  - "post-processors": { "keep_input_artifact": true }(to keep)
    - will only keep to this single post-processor - not others
  - run on specific builds only: - excepts "only" and "except"
- provisioners:
  - array of provisioners for packer to configure within
    running machine prior to turning into image
  - provisioners run for each of the builds defined
  - specific options available within docs for provisioners
  - minimum requirement is "type" key (name of provisioner)
    - there are exceptions here
  - example: { "type": "shell", "script": "myscript.sh" }
  - can use "only" or "except" to run on specific builds only
  - can use "override" to override default provisioner values
    - e.g. setup a user other than "ec2-user"
    - this configuration is then merged into the existing
  - can use "pause_before" to pause before running
- user variables
  - from cli, env vars, vault, files
  - packer build -var 'aws_access_key=foo' template.json
   -var-file=variables.json template.json
     - contents of variables.json:
       {
         "aws_access_key": "foo", 
         "aws_secret_key": "bar"
       } 
   - can specify -var-files multiple times for more files
     - files read later overide the former
   - can combine -var and -var-file (later overides like above)
  - from 'variables' section in template
    "key": "map", (define defaults)
  - variables then used in builder section
  - if the default is 'null', then user variable is REQUIRED
  - user variables called with {{user}} function in the form of
    {{user `variable`}}
    - can be used anywhere except 'variables' section in template
  - environment variables:
    - the 'env' function is available ONLY within the default
      value of a user variable - allowing a default variable to
      an environment variable:
      { "variables": { "my_secret": "{{env `MY_SECRET`}}", } }
  - sensitive variables:
    - variables are printed to logs (including environment ones).
      the below does the same thing except logs are replaced with
      <sensitive> keyword
      {
      "variables": {
        "my_secret": "{{env `MY_SECRET`}}",
        "fo": "bar"
      },
      "sensitive-variables": ["my_secret", "foo"]
      }
  - vault variables:
    "my_secret": "{{ vault `/secret/data/hello` `foo`}}"
    - requires variables VAULT_TOKEN and VAULT_ADDR
  - array values (some templates call array values)
  "destination_regions": "us-west-1,us-west-2"
  "ami_regions": "{{user `destination_regions`}}",
- recipes:
  - conditional provisioner step
    - no specific syntax to make the value conditional, but
      can use command possibly:
      "type": "shell-local".
      "command": "if [ ! -z ..."
  - $HOME: create HOME variable to use:
    { "variables": { "home": "{{env `HOME`}}" } }
    { "builders": [ { "account_file": "{{ user `home` }}" } ] }

# builders:
- resposible for createing machines and generating images
- seperate builders for EC2, VMWare, etc
- each builder has its own configuration options and parameters

# Amazon EC2 (builder)
- create amazon AMIs
- multiple builders to build AMI:
  - amazon-ebs (ebs backed)
  - amazon-instance (create instance store AMI (store in S3))
  - amazon-chroot (ebs backed AMI by mounting root and chroot)
    - fast but advanced
  - amazon-ebssurrogate (ebs backed AMI from scratch, advanced)
 
- amazon-ebs volume builder



    

